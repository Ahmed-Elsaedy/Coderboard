# Interactive Online Training Course Platform - MVP

## Core Features

### Teacher Features
1. Authentication
   - Basic login/logout
   - Simple profile

2. Lecture Creation
   - Basic Info:
     * Title
     * Description
     * Date
   - Status (draft/published)

3. Drawing Canvas (Core)
   - Basic drawing tools:
     * Pen tool
     * Eraser
     * Color picker
   - Save drawing
   - Clear canvas

4. Animation Features
   - Record drawing process
   - Basic playback controls
   - Save animation

### Student Features
1. Authentication
   - Basic login/logout

2. Learning Interface
   - View available lectures
   - Watch animated drawings
   - Basic playback controls:
     * Play/Pause
     * Progress bar

## Technical Scope

### Frontend
- Responsive web design
- Canvas-based drawing system
- Animation playback system

### Backend
- User authentication
- Data storage:
  * User accounts
  * Lectures
  * Drawings
  * Animation data

### MVP Limitations
- Single brush type
- No layer management
- No voice recording
- No supplementary materials
- Basic UI/UX
- Limited search capabilities
- No student progress tracking

## Application Structure

### Shared Components
- `/Components/Shared`
  * `_Layout.cshtml` - Main layout template
    - Navigation bar component
    - Sidebar component
    - Footer component
  * `_LoginPartial.cshtml` - Authentication status
    - User menu component
    - Profile picture component
  * `_ValidationScriptsPartial.cshtml` - Client-side validation
  * Components/
    - `AlertComponent` - Success/error messages
    - `LoadingSpinner` - Loading states
    - `ConfirmDialog` - Confirmation popups
    - `Pagination` - Page navigation
    - `SearchBar` - Search functionality
    - `FilterPanel` - Common filters

### Authentication Pages & Components
- `/Pages/Account`
  * `Login.cshtml` - User login
    - Login form component
    - Social login buttons
    - Remember me toggle
    - Password reset link
  * `Register.cshtml` - User registration
    - Registration form component
    - Email verification
    - Terms acceptance
  * `Manage/`
    - `Profile.cshtml` - Profile management
      * Profile form component
      * Photo upload component
      * Password change form

### Teacher Area
- `/Pages/Teacher`
  * `Dashboard.cshtml` - Teacher's main view
    - Components/
      * `DashboardLayout` - Main layout structure
        - Statistics summary
        - Quick actions panel
        - Recent activity
      * `LecturesList` - Lectures management
        - Grid/List view toggle
        - Sorting controls
        - `LectureCard` - Individual lecture item
  * `Lectures/`
    - `Create.cshtml` - New lecture
      * `LectureForm` - Basic info form
      * `MetadataEditor` - Additional details
    - `Edit.cshtml` - Modify lecture
      * `LectureForm` - Edit form
      * `StatusManager` - Publication status
    - `Drawing/`
      * `Canvas.cshtml` - Drawing interface
        - `CanvasContainer` - Drawing area
        - `ToolBar` - Drawing tools
        - `ColorPicker` - Color selection
        - `UndoRedoControls` - History controls
      * `Animation.cshtml` - Animation recording
        - `TimelineEditor` - Animation timeline
        - `PlaybackControls` - Preview controls
        - `RecordingPanel` - Recording controls

### Student Area
- `/Pages/Student`
  * `Dashboard.cshtml` - Student's main view
    - Components/
      * `DashboardLayout` - Main layout
        - Available lectures
        - Progress summary
        - Recent activity
      * `LecturesCatalog` - Browse lectures
        - Search and filters
        - Category navigation
        - `LecturePreviewCard` - Lecture preview
  * `Lectures/`
    - `View.cshtml` - Watch lecture
      * `AnimationPlayer` - Playback interface
        - Video-like controls
        - Progress bar
        - Speed controls
      * `LectureInfo` - Metadata display
      * `NotePanel` - Note-taking area

### Error Pages
- `/Pages/Error`
  * `Error.cshtml` - Generic error
    - Error details component
    - Contact support button
  * `NotFound.cshtml` - 404 page
    - Search suggestion
    - Navigation help
  * `AccessDenied.cshtml` - 403 page
    - Permission explanation
    - Request access option

### Shared Features
- Real-time notifications
- Search functionality
- Authentication state
- Error handling
- Loading states
- Form validation

## User Stories and Implementation Tasks

### Authentication Stories

As a visitor, I want to register for an account so that I can access the platform
- Frontend:
  * Create registration form component with validation
  * Implement form submission to API
  * Display success/error messages
  * Add client-side validation
- Backend:
  * Create POST /api/auth/register endpoint
  * Implement password hashing
  * Set up email validation
  * Create Users table and model
  * Return JWT token on success

As a user, I want to log in to access my account
- Frontend:
  * Create login form component
  * Store JWT token in local storage
  * Implement authentication state management
  * Add "Remember me" checkbox
- Backend:
  * Create POST /api/auth/login endpoint
  * Implement JWT token generation
  * Add refresh token functionality
  * Log login attempts

As a user, I want to log out to secure my account
- Frontend:
  * Add logout button component
  * Clear local storage and state
  * Redirect to home page
- Backend:
  * Create POST /api/auth/logout endpoint
  * Invalidate refresh tokens
  * Clear session data

As a user, I want to update my basic profile information
- Frontend:
  * Create profile edit form
  * Implement photo upload preview
  * Add form validation
  * Show success messages
- Backend:
  * Create PUT /api/auth/profile endpoint
  * Set up photo storage service
  * Create Profiles table and model
  * Implement validation

### Teacher Stories

As a teacher, I want to see my dashboard showing all my lectures
- Frontend:
  * Create dashboard layout component
  * Implement lectures grid/list view
  * Add sorting and filtering UI
  * Create lecture card component
- Backend:
  * Create GET /api/lectures endpoint
  * Implement filtering and sorting
  * Add pagination support
  * Create Lectures table and model

As a teacher, I want to create a new lecture by entering a title, description, and date
- Frontend:
  * Create lecture form component
  * Add validation feedback
  * Implement draft saving
  * Show success messages
- Backend:
  * Create POST /api/lectures endpoint
  * Implement draft status logic
  * Add validation rules
  * Set up automatic saving

As a teacher, I want to open a blank canvas to start drawing my lecture content
- Frontend:
  * Create canvas container component
  * Set up basic drawing infrastructure
  * Implement save progress button
  * Add loading states
- Backend:
  * Create POST /api/lectures/{id}/drawing endpoint
  * Set up drawing data storage (abstract)
  * Implement auto-save functionality
  * Add drawing state management

As a teacher, I want to record the animation of my drawing process
- Frontend:
  * Add recording controls component
  * Create animation preview player
  * Implement basic timeline UI
  * Add progress indicator
- Backend:
  * Create POST /api/lectures/{id}/animation endpoint
  * Set up animation data storage (abstract)
  * Implement animation state management
  * Add recording metadata

As a teacher, I want to publish my lecture so students can view it
- Frontend:
  * Add publish button component
  * Show publication status
  * Implement confirmation dialog
  * Display success message
- Backend:
  * Create PUT /api/lectures/{id}/publish endpoint
  * Update lecture status
  * Validate lecture completeness
  * Handle publication process

### Student Stories

As a student, I want to see my dashboard with available lectures
- Frontend:
  * Create student dashboard component
  * Implement lectures browse view
  * Add search and filter UI
  * Create lecture preview cards
- Backend:
  * Create GET /api/lectures/available endpoint
  * Implement search functionality
  * Add filters for published lectures
  * Return paginated results

As a student, I want to browse through all published lectures
- Frontend:
  * Create lecture catalog component
  * Implement infinite scroll/pagination
  * Add filter sidebar
  * Show lecture metadata
- Backend:
  * Enhance GET /api/lectures endpoint
  * Add advanced filtering
  * Implement sorting options
  * Return lecture previews

As a student, I want to select and watch a lecture
- Frontend:
  * Create lecture viewer component
  * Implement animation player controls
  * Add progress tracking UI
  * Show loading states
- Backend:
  * Create GET /api/lectures/{id}/animation endpoint
  * Stream animation data efficiently
  * Track viewing progress
  * Handle playback state

### Out of MVP Scope Stories (Future)
- As a teacher, I want to add voice narration to my animations
- As a teacher, I want to organize my lectures into courses
- As a student, I want to take notes while watching lectures
- As a student, I want to track my progress through lectures
- As a student, I want to bookmark important moments in animations
- As a teacher, I want to see analytics about student engagement
- As a user, I want to use advanced drawing tools and layers

## Implementation Tasks by User Story

### Authentication Implementation
1. "Register for an account"
   - Create Users database table
   - Implement registration form
   - Add email validation
   - Set up password hashing
   - Create success/error messages

2. "Log in to access account"
   - Implement login form
   - Set up authentication middleware
   - Create session management
   - Add remember me functionality
   - Implement login failure handling

3. "Log out to secure account"
   - Implement logout action
   - Clear session data
   - Redirect to home page

4. "Update profile information"
   - Create profile edit form
   - Add profile photo upload
   - Implement save changes functionality
   - Add validation messages

### Teacher Implementation
1. "See dashboard with lectures"
   - Create Lectures database table
   - Design dashboard layout
   - Implement lectures list view
   - Add sorting and filtering
   - Show lecture statistics

2. "Create new lecture"
   - Design lecture creation form
   - Implement save functionality
   - Add validation rules
   - Create success messages
   - Set up draft status

3. "Drawing and Animation" (Abstract - Details Later)
   - Set up canvas container page
   - Create basic canvas infrastructure
   - Implement save/load functionality
   - Set up animation data structure
   - Create animation playback container

4. "Manage Lectures"
   - Implement edit functionality
   - Add delete confirmation
   - Create update success messages
   - Add publish/unpublish toggle
   - Implement lecture status tracking

### Student Implementation
1. "View Dashboard"
   - Design student dashboard
   - Show available lectures list
   - Implement search functionality
   - Add lecture sorting options
   - Display lecture previews

2. "Browse Lectures"
   - Create lecture catalog page
   - Implement filtering system
   - Add pagination
   - Show lecture metadata
   - Create lecture cards

3. "Watch Lectures"
   - Create lecture viewer page
   - Set up animation player container
   - Implement basic controls
   - Add progress tracking
   - Create error handling

### Database Tables
1. Users
   - UserId (PK)
   - Email
   - PasswordHash
   - Role (Teacher/Student)
   - CreatedDate
   - LastLogin

2. Profiles
   - ProfileId (PK)
   - UserId (FK)
   - FullName
   - PhotoUrl
   - UpdatedDate

3. Lectures
   - LectureId (PK)
   - TeacherId (FK)
   - Title
   - Description
   - CreatedDate
   - UpdatedDate
   - Status
   - DrawingData (JSON)
   - AnimationData (JSON)

### API Endpoints
1. Authentication
   - POST /api/auth/register
   - POST /api/auth/login
   - POST /api/auth/logout
   - PUT /api/auth/profile

2. Lectures
   - GET /api/lectures
   - POST /api/lectures
   - GET /api/lectures/{id}
   - PUT /api/lectures/{id}
   - DELETE /api/lectures/{id}
   - PUT /api/lectures/{id}/publish

3. Drawing/Animation (Abstract)
   - POST /api/lectures/{id}/drawing
   - GET /api/lectures/{id}/drawing
   - POST /api/lectures/{id}/animation
   - GET /api/lectures/{id}/animation
